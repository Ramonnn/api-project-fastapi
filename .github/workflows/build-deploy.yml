# name: Build and Deploy Code
#
# on: [push, pull_request]
#
# job:
#   build:
#     environment:
#       name: fastapi
#     env:
#       DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
#       DATABASE_PORT: ${{secrets.DATABASE_PORT}}
#       DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
#       DATABASE_NAME: ${{secrets.DATABASE_NAME}}
#       DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
#       SECRET_KEY: ${{secrets.SECRET_KEY}}
#       ALGORITHM: ${{secrets.ALGORITHM}}
#       ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
#
#     services:
#       postgres:
#         image: postgres
#         env:
#           POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
#           POSTGRES_DB: ${{secrets.DATABASE_NAME}}
#         ports:
#         - 5432:5432
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#
#     runs-on: ubuntu-latest
#     steps:
#       - name: pulling git repo
#         uses: actions/checkout@v2
#
#       - name: Install Python v3.10
#         uses: actions/setup-python@v2
#         with:
#           python-version: "3.10"
#
#       - name: update pip
#         run: python -m pip install --upgrade pip
#
#       - name: Install all dependencies
#         run: pip install -r requirements.txt
#
#       - name: end message
#         run: echo "end deployment"
#         
#       - name: Checkout
#         uses: actions/checkout@v3
#
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2
#
#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       -
#         name: Build and push
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           push: true
#           tags: user/app:latest
#           cache-from: type=registry,ref=user/app:latest
#           cache-to: type=inline
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   environment:
  #     name: production
  #     steps:
  #     - name: deploying build to ubuntu server
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{secrets.PROD_USERNAME}}
  #         password: ${{secrets.PROD_PASSWORD}}
  #         script: |
  #           cd app/src
  #           git pull
#             echo {{secrets.PROD_PASSWORD}} | sudo -S systemctl restart fastapi
  #     

